{"version":3,"file":"static/js/contacts-page.fbbfa099.chunk.js","mappings":"6OAEaA,EAAgBC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,ihBAiBzBC,EAAgBH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,kJAQzBG,EAAgBL,EAAAA,GAAAA,EAAQM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,mNAWxBK,EAAaP,EAAAA,GAAAA,OAAaQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,q5B,UCpC1BO,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASA,QAAS,EAClDC,EAAe,SAAAF,GAAK,OAAIA,EAAMG,MAAO,EAIrCC,GAAwBC,EAAAA,EAAAA,IACnC,CAACN,EAAgBG,IACjB,SAACD,EAAUE,GACT,IAAMG,EAAmBH,EAAOI,cAChC,OAAON,EAASE,QAAO,SAAAK,GAAO,OAAAA,EAAJC,KACnBF,cAAcG,SAASJ,EAAiB,GAEjD,I,mBCTa,SAASK,IACtB,IAAMV,GAAWW,EAAAA,EAAAA,IAAYR,GACvBS,GAAWC,EAAAA,EAAAA,MAIf,OACEC,EAAAA,EAAAA,KAAC1B,EAAa,CAAA2B,SACXf,EAASgB,KAAI,SAAAT,GAAA,IAAEC,EAAID,EAAJC,KAAMS,EAAEV,EAAFU,GAAIC,EAAKX,EAALW,MAAK,OAC3BC,EAAAA,EAAAA,MAAC3B,EAAa,CAAUyB,GAAIA,EAAGF,SAAA,EAC7BD,EAAAA,EAAAA,KAACpB,EAAa,CAAAqB,SAAEP,EAAO,IAAMU,KAC7BJ,EAAAA,EAAAA,KAAClB,EAAU,CACTwB,KAAK,SACLC,QAAS,kBATC,SAACJ,GAAE,OAAKL,GAASU,EAAAA,EAAAA,IAAcL,GAAK,CAS/BM,CAAgBN,EAAG,EAACF,SAAC,aAJpBE,EAOJ,KAI1B,C,oCClBa,SAASO,IACtB,IAAMxB,GAAWW,EAAAA,EAAAA,IAAYb,GACvBc,GAAWC,EAAAA,EAAAA,MAEjBY,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BjB,EAAImB,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA0BJ,EAAAA,EAAAA,UAAS,IAAGK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAA/BZ,EAAKa,EAAA,GAAEC,EAAQD,EAAA,GAEhBE,EAAe,SAAAC,GACnB,IAAAC,EAAwBD,EAAME,cAAtB5B,EAAI2B,EAAJ3B,KAAM6B,EAAKF,EAALE,MACd,OAAQ7B,GACN,IAAK,OACHqB,EAAQQ,GACR,MAEF,IAAK,QACHL,EAASK,GASjB,EAyCI,OACIlB,EAAAA,EAAAA,MAACmB,EAAAA,GAAO,CAACC,SAxBM,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAcF,EAAEJ,cAChB5B,EAAOkC,EAAYlC,KAAK6B,MACxBnB,EAAQwB,EAAYxB,MAAMmB,MACxBM,EAAe,CACnBnC,KAAAA,EACAU,MAAAA,EACAD,IAAI2B,EAAAA,EAAAA,QAhBQ,SAAApC,GAChB,OAAOR,EAAS6C,MAAK,SAAAC,GAAO,OAAIA,EAAQtC,KAAKF,gBAAkBE,EAAKF,aAAa,GACnF,CAiBMyC,CAAUvC,IAfG,SAAAU,GACjB,OAAOlB,EAAS6C,MAAK,SAAAC,GAAO,OAAIA,EAAQ5B,QAAUA,CAAK,GACzD,CAea8B,CAAW9B,GAGpBN,GAASqC,EAAAA,EAAAA,IAAWN,IAFpBO,MAAM,gBAADC,OAAiBjC,EAAK,kCAF3BgC,MAAM,cAADC,OAAe3C,EAAI,kCA3B1BqB,EAAQ,IAIRG,EAAS,GA+BX,EAIwCjB,SAAA,EAC9BI,EAAAA,EAAAA,MAACiC,EAAAA,GAAS,CAAArC,SAAA,EACND,EAAAA,EAAAA,KAACuC,EAAAA,GAAa,CAAAtC,SAAC,UACfD,EAAAA,EAAAA,KAACwC,EAAAA,GAAS,CACNC,SAAWtB,EACXb,KAAK,OACLZ,KAAK,OACLgD,QAAQ,aACRC,MAAM,yIACNC,UAAQ,EACRrB,MAAO7B,QAGfW,EAAAA,EAAAA,MAACiC,EAAAA,GAAS,CAAArC,SAAA,EACND,EAAAA,EAAAA,KAACuC,EAAAA,GAAa,CAAAtC,SAAC,kBACfD,EAAAA,EAAAA,KAACwC,EAAAA,GAAS,CACNC,SAAWtB,EACXb,KAAK,MACLZ,KAAK,QACLgD,QAAQ,aACRC,MAAM,+FACNC,UAAQ,EACRrB,MAAOnB,QAGfJ,EAAAA,EAAAA,KAAC6C,EAAAA,GAAU,CAAA5C,SAAC,kBAGxB,CCnGO,I,MAAM6C,EAAYvE,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4gB,UCIpB,SAASsE,IACpB,IAAMxB,GAAQ1B,EAAAA,EAAAA,IAAYV,GACpBW,GAAWC,EAAAA,EAAAA,MAOjB,OACIM,EAAAA,EAAAA,MAACyC,EAAS,CAAA7C,SAAA,EACND,EAAAA,EAAAA,KAACuC,EAAAA,GAAa,CAAAtC,SAAC,mBACfD,EAAAA,EAAAA,KAACwC,EAAAA,GAAS,CAAClC,KAAK,OAAOZ,KAAK,SAAS+C,SAPhB,SAAHhD,GAA+B,IAAf8B,EAAK9B,EAAfuD,OAAUzB,MACtCzB,GAASmD,EAAAA,EAAAA,GAAiB1B,GAC5B,EAK6EA,MAAOA,EAAOmB,QAAS,UAAaE,UAAQ,MAG/H,CCnBO,IAAMM,EAAkB3E,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mCAI5B0E,EAAoB5E,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,wFAM7B2E,EAAmB7E,EAAAA,GAAAA,GAASM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,wFCF1B,SAAS4E,IACtB,IAAMvD,GAAWC,EAAAA,EAAAA,MACXb,GAAWW,EAAAA,EAAAA,IAAYb,GAM7B,OAJAsE,EAAAA,EAAAA,YAAU,WACRxD,GAASyD,EAAAA,EAAAA,MACX,GAAG,CAACzD,KAGFO,EAAAA,EAAAA,MAAC6C,EAAe,CAAAjD,SAAA,EACdD,EAAAA,EAAAA,KAACmD,EAAiB,CAAAlD,SAAC,eACnBD,EAAAA,EAAAA,KAACU,EAAW,KACZV,EAAAA,EAAAA,KAACoD,EAAgB,CAAAnD,SAAC,aACjBf,EAASsE,OAAS,IACjBxD,EAAAA,EAAAA,KAACuC,EAAAA,GAAa,CAAAtC,SAAC,2BAEjBD,EAAAA,EAAAA,KAAC+C,EAAU,KACX/C,EAAAA,EAAAA,KAACJ,EAAW,MAGlB,C,wDC7BO,IAkBIkC,EAAS,WAAH,IAAI2B,EAAIC,UAAAF,OAAA,QAAAG,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BE,OAAOC,gBAAgB,IAAIC,WAAWL,IAAOM,QAAO,SAAC5D,EAAI6D,GAWvD,OARE7D,IAFF6D,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["components/ContactList/ContactList.styled.jsx","redux/selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/FilterForm/FilterForm.styled.jsx","components/FilterForm/FilterForm.jsx","pages/ContactsPage/ContactsPage.styled.jsx","pages/ContactsPage/ContactsPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContactListUl = styled.ul`\n    background-color: rgba(255,255,255,0.2);\n    padding: 0.5em;\n    border-radius: 20px;\n    border-left: 1px solid $white;\n    border-top: 1px solid $white;\n    backdrop-filter: blur(10px);\n    box-shadow: 20px 20px 40px -6px rgba(0,0,0,0.5);\n    text-align: center;\n    text-decoration: none;\n    position: relative;\n    transition: all 0.2s ease-in-out;\n    box-shadow: inset rgba(0, 0, 0, 0.541) -3px -3px 8px,\n    inset rgba(255, 253, 253, 0.9) 3px 3px 8px,\n    rgba(0, 0, 0, 0.8) 3px 3px 8px -3px;\n`;\n\nexport const ContactListLi = styled.li`\n    display: flex;\n    justify-content: space-between;\n    flex-basis: 100%;\n    min-block-size: 35px;\n    box-sizing: border-box;\n`;\n\nexport const ItemParagraph = styled.p`\n    display: block;\n    font-weight: 400;\n    color: #fff;\n    opacity: 0.7;\n    font-size: 1rem;\n    margin-right: 20px;\n    margin-bottom: 10px;\n    text-shadow: 2px 2px 4px rgba(0,0,0,0.2);\n`;\n\nexport const ItemButton = styled.button`\n    background-color: transparent;\n    padding: 10px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n    border: none;\n    border-left: 1px solid $white;\n    border-top: 1px solid $white;\n    border-radius: 5000px;\n    backdrop-filter: blur(5px);\n    box-shadow: 4px 4px 60px rgba(0,0,0,0.2);\n    color: #fff;\n    font-family: Montserrat, sans-serif;\n    font-weight: 400;\n    transition: all 0.2s ease-in-out;\n    text-shadow: 2px 2px 4px rgba(0,0,0,0.2);\n    width: 100px;\n    height: 35px;\n    font-size: 14px;\n        \n    &:hover {\n        background-color: rgba(255,255,255,0.1);\n        box-shadow: 4px 4px 60px 8px rgba(0,0,0,0.2);\n        cursor: pointer;\n    }\n\n    &:focus {\n        background-color: rgba(255,255,255,0.1);\n        box-shadow: 4px 4px 60px 8px rgba(0,0,0,0.2);\n    }\n        \n    &:active {\n        background-color: rgba(255,255,255,0.2);\n    }\n`;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  }\n);","import { ContactListUl, ContactListLi, ItemButton, ItemParagraph } from \"./ContactList.styled\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectVisibleContacts } from './../../redux/selectors';\nimport { deleteContact } from \"./../../redux/operations\";\n\nexport default function ContactList() {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = (id) => dispatch(deleteContact(id));\n  \n    return (\n      <ContactListUl >\n        {contacts.map(({name, id, phone}) => (\n            <ContactListLi key={id} id={id}>\n              <ItemParagraph>{name + ':' + phone}</ItemParagraph>\n              <ItemButton\n                type=\"button\"\n                onClick={() => onDeleteContact(id)}>\n                Delete\n              </ItemButton>\n            </ContactListLi>\n          ))}\n      </ContactListUl>\n    );\n  }","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { FormBox, FormParagraph, FormInput, FormButton, FormLabel } from \"./ContactForm.styled\";\nimport { selectContacts } from './../../redux/selectors';\nimport { addContact } from \"./../../redux/operations\";\n\nexport default function ContactForm() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'phone':\n        setPhone(value);\n        break;\n\n      default:\n        break;\n    }\n  \n  // const { value } = event.currentTarget;\n  // event.currentTarget.name === 'name' ? setName(value) : setPhone(value);\n};\n\n  const resetName = () => {\n    setName('');\n  };\n\n  const resetPhone = () => {\n    setPhone('');\n  };\n\n  const checkName = name => {\n    return contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase(),);\n  };\n\n  const checkPhone = phone => {\n    return contacts.find(contact => contact.phone === phone);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const formElement = e.currentTarget;\n    const name = formElement.name.value;\n    const phone = formElement.phone.value;\n      const inputContact = { \n        name, \n        phone, \n        id: nanoid() \n      };\n\n    if (checkName(name)) {\n      alert(`this name: ${name} is already in your contacts!`);\n    } else if (checkPhone(phone)) {\n      alert(`this number: ${phone} is already in your contacts!`);\n    } else {\n      dispatch(addContact(inputContact));\n    }\n    resetName();\n    resetPhone();\n  };\n\n\n    return (\n        <FormBox onSubmit={ handleSubmit }>\n            <FormLabel>\n                <FormParagraph>Name</FormParagraph>\n                <FormInput\n                    onChange={ handleChange }\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"[^'\\x22]+\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    value={name}\n                />\n            </FormLabel>\n            <FormLabel> \n                <FormParagraph>Phone number</FormParagraph>\n                <FormInput\n                    onChange={ handleChange }\n                    type=\"tel\"\n                    name=\"phone\"\n                    pattern=\"[^'\\x22]+\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    value={phone}\n                />\n            </FormLabel>\n            <FormButton>Add contact</FormButton>\n        </FormBox>\n    );\n}","import styled from 'styled-components';\n\nexport const FilterBox = styled.div`\n    background-color: rgba(255,255,255,0.2);\n    margin-top: 16px;\n    padding: 0.5em;\n    border-radius: 20px;\n    border-left: 1px solid $white;\n    border-top: 1px solid $white;\n    backdrop-filter: blur(10px);\n    box-shadow: 20px 20px 40px -6px rgba(0,0,0,0.5);\n    text-align: center;\n    position: relative;\n    transition: all 0.2s ease-in-out;\n    box-shadow: inset rgba(0, 0, 0, 0.541) -3px -3px 8px,\n    inset rgba(255, 253, 253, 0.9) 3px 3px 8px,\n    rgba(0, 0, 0, 0.8) 3px 3px 8px -3px;\n`;","import { FilterBox } from './FilterForm.styled';\nimport { FormParagraph, FormInput } from 'components/ContactForm/ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from './../../redux/selectors';\nimport { setFilterContact } from './../../redux/slices/filterSlice';\n\nexport default function FilterForm() {\n    const value = useSelector(selectFilter);\n    const dispatch = useDispatch();\n  \n    // const handleSetFilterValue = event => dispatch(setFilterContact(event.currentTarget.value));\n    const handleSetFilterValue = ({ target: { value } }) => {\n        dispatch(setFilterContact(value));\n      };\n\n    return (\n        <FilterBox>\n            <FormParagraph>Find contacts</FormParagraph>\n            <FormInput type=\"text\" name=\"filter\" onChange={ handleSetFilterValue } value={value} pattern={\"[^'\\x22]+\"} required/>\n        </FilterBox>\n    )\n}","import styled from 'styled-components';\n\nexport const ContactsPageBox = styled.div`\n    text-align: center;\n`;\n\nexport const ContactsPageTitle = styled.h1`\n    color: #e91ba4db;\n    font-style: oblique;\n    text-decoration: blink;\n`;\n\nexport const ContactsPageName = styled.h2`\n    color: #e91ba4db;\n    font-style: oblique;\n    text-decoration: blink;\n`;","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ContactList from './../../components/ContactList/ContactList';\nimport ContactForm from './../../components/ContactForm/ContactForm';\nimport FilterForm from './../../components/FilterForm/FilterForm';\nimport { selectContacts } from './../../redux/selectors';\nimport { fetchContacts } from './../../redux/operations';\nimport { ContactsPageBox, ContactsPageName, ContactsPageTitle } from './ContactsPage.styled';\nimport { FormParagraph } from 'components/ContactForm/ContactForm.styled';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactsPageBox>\n      <ContactsPageTitle>Phonebook</ContactsPageTitle>\n      <ContactForm />\n      <ContactsPageName>Contacts</ContactsPageName>\n      {contacts.length > 1 && (\n        <FormParagraph>Find contacts by name</FormParagraph>\n      )}\n      <FilterForm />\n      <ContactList />\n    </ContactsPageBox>\n  );\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ContactListUl","styled","_templateObject","_taggedTemplateLiteral","ContactListLi","_templateObject2","ItemParagraph","_templateObject3","ItemButton","_templateObject4","selectContacts","state","contacts","selectFilter","filter","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","_ref","name","includes","ContactList","useSelector","dispatch","useDispatch","_jsx","children","map","id","phone","_jsxs","type","onClick","deleteContact","onDeleteContact","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setPhone","handleChange","event","_event$currentTarget","currentTarget","value","FormBox","onSubmit","e","preventDefault","formElement","inputContact","nanoid","find","contact","checkName","checkPhone","addContact","alert","concat","FormLabel","FormParagraph","FormInput","onChange","pattern","title","required","FormButton","FilterBox","FilterForm","target","setFilterContact","ContactsPageBox","ContactsPageTitle","ContactsPageName","ContactsPage","useEffect","fetchContacts","length","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}