{"version":3,"file":"static/js/913.8e003ab5.chunk.js","mappings":"kTAEaA,EAAeC,EAAAA,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iiBAkB1BC,EAAoBH,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,0FAMhCG,EAAoBL,EAAAA,GAAAA,MAAYM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,k5BAgChCK,EAAqBP,EAAAA,GAAAA,OAAaQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,2iC,UChDhC,SAASO,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAC9BC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA0BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAgCT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAArCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAEtBG,EAAe,SAAAC,GACnB,IAAAC,EAAwBD,EAAME,OAAtBb,EAAIY,EAAJZ,KAAMc,EAAKF,EAALE,MAEd,OAAQd,GACN,IAAK,OACH,OAAOC,EAAQa,GACjB,IAAK,QACH,OAAOT,EAASS,GAClB,IAAK,WACH,OAAOL,EAAYK,GAIzB,EA4BA,OACEC,EAAAA,EAAAA,MAACnC,EAAY,CAACoC,SA3BK,SAAAL,GACnBA,EAAMM,iBAEN,IAAMC,EAAcP,EAAMQ,cACpBnB,EAAOkB,EAAYlB,KAAKc,MACxBV,EAAQc,EAAYd,MAAMU,MAC1BN,EAAWU,EAAYV,SAASM,MAChCM,EAAY,CAChBpB,KAAAA,EACAI,MAAAA,EACAI,SAAAA,EACAa,IAAIC,EAAAA,EAAAA,OAEN,OAAKtB,EAAKuB,QAAWnB,EAAMmB,QAAWf,EAASe,OAEpCf,EAASgB,OAAS,EACpBC,EAAAA,GAAAA,KACL,oHAGJlC,GAASmC,EAAAA,EAAAA,IAASN,IAClBnB,EAAQ,IACRI,EAAS,SACTI,EAAY,KATHgB,EAAAA,GAAAA,MAAY,uCAUvB,EAGwCE,aAAa,MAAKC,SAAA,EACpDb,EAAAA,EAAAA,MAAC/B,EAAiB,CAAA4C,SAAA,EAChBC,EAAAA,EAAAA,KAACC,EAAAA,GAAa,CAAAF,SAAC,qBACbC,EAAAA,EAAAA,KAAC3C,EAAiB,CACd6C,MAAM,OACNC,QAAQ,WACRC,KAAK,OACLjC,KAAK,OACLc,MAAOd,EACPkC,SAAUxB,QAGlBK,EAAAA,EAAAA,MAAC/B,EAAiB,CAAA4C,SAAA,EAClBC,EAAAA,EAAAA,KAACC,EAAAA,GAAa,CAAAF,SAAC,sBACXC,EAAAA,EAAAA,KAAC3C,EAAiB,CACd6C,MAAM,QACNC,QAAQ,WACRC,KAAK,QACLjC,KAAK,QACLc,MAAOV,EACP8B,SAAUxB,QAGlBK,EAAAA,EAAAA,MAAC/B,EAAiB,CAAA4C,SAAA,EAClBC,EAAAA,EAAAA,KAACC,EAAAA,GAAa,CAAAF,SAAC,yBACXC,EAAAA,EAAAA,KAAC3C,EAAiB,CACd6C,MAAM,WACNC,QAAQ,WACRG,MAAM,UACNF,KAAK,WACLjC,KAAK,WACLc,MAAON,EACP0B,SAAUxB,QAGlBjB,IACAoC,EAAAA,EAAAA,KAACzC,EAAkB,CAAC4C,QAAQ,YAAYC,KAAK,SAAQL,SAAC,YAKvDnC,IAAaoC,EAAAA,EAAAA,KAACO,EAAAA,EAAM,MAG3B,C,wDCtGO,IAkBId,EAAS,WAAH,IAAIe,EAAIC,UAAAd,OAAA,QAAAe,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BE,OAAOC,gBAAgB,IAAIC,WAAWL,IAAOM,QAAO,SAACtB,EAAIuB,GAWvD,OAREvB,IAFFuB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["pages/RegisterPage/RegisterPage.styled.jsx","pages/RegisterPage/RegisterPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const RegisterForm = styled.form`\n    display: block;\n    background-color: rgba(255,255,255,0.2);\n    padding: 1.5em;\n    border-radius: 20px;\n    border-left: 1px solid $white;\n    border-top: 1px solid $white;\n    backdrop-filter: blur(10px);\n    box-shadow: 20px 20px 40px -6px rgba(0,0,0,0.5);\n    text-align: center;\n    position: relative;\n    transition: all 0.2s ease-in-out;\n    margin-top: 16px;\n    box-shadow: inset rgba(0, 0, 0, 0.541) -3px -3px 8px,\n    inset rgba(255, 253, 253, 0.9) 3px 3px 8px,\n    rgba(0, 0, 0, 0.8) 3px 3px 8px -3px;\n`;\n\nexport const RegisterFormLabel = styled.label`\n    display: block;\n    justify-content: center;\n    flex-direction: column;\n`;\n\nexport const RegisterFormInput = styled.input`\n    background-color: transparent;\n    width: 200px;\n    padding: 1em;\n    margin-bottom: 10px;\n    border: none;\n    border-left: 1px solid $white;\n    border-top: 1px solid $white;\n    border-radius: 5000px;\n    backdrop-filter: blur(5px);\n    box-shadow: 4px 4px 60px rgba(0,0,0,0.2);\n    color: #fff;\n    font-family: Montserrat, sans-serif;\n    font-weight: 500;\n    transition: all 0.2s ease-in-out;\n    text-align: center;\n    text-shadow: 2px 2px 4px rgba(0,0,0,0.2);\n    box-shadow: inset rgba(0, 0, 0, 0.541) -3px -3px 8px,\n    inset rgba(255, 253, 253, 0.9) 3px 3px 8px,\n    rgba(0, 0, 0, 0.8) 3px 3px 8px -3px;\n    \n    &:hover {\n        background-color: rgba(255,255,255,0.1);\n        box-shadow: 4px 4px 60px 8px rgba(0,0,0,0.2);\n    }\n\n    &:focus {\n        background-color: rgba(255,255,255,0.1);\n        box-shadow: 4px 4px 60px 8px rgba(0,0,0,0.2);\n    }\n`;\n\nexport const RegisterFormButton = styled.button`\n    background-color: transparent;\n    padding: 10px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n    border: none;\n    border-left: 1px solid $white;\n    border-top: 1px solid $white;\n    border-radius: 5000px;\n    backdrop-filter: blur(5px);\n    box-shadow: 4px 4px 60px rgba(0,0,0,0.2);\n    color: #fff;\n    font-family: Montserrat, sans-serif;\n    font-weight: 400;\n    transition: all 0.2s ease-in-out;\n    text-shadow: 2px 2px 4px rgba(0,0,0,0.2);\n    width: 100px;\n    height: 35px;\n    font-size: 14px;\n    box-shadow: inset rgba(0, 0, 0, 0.541) -3px -3px 8px,\n    inset rgba(255, 253, 253, 0.9) 3px 3px 8px,\n    rgba(0, 0, 0, 0.8) 3px 3px 8px -3px;\n        \n    &:hover {\n        background-color: rgba(255,255,255,0.1);\n        box-shadow: 4px 4px 60px 8px rgba(0,0,0,0.2);\n        cursor: pointer;\n    }\n\n    &:focus {\n        background-color: rgba(255,255,255,0.1);\n        box-shadow: 4px 4px 60px 8px rgba(0,0,0,0.2);\n    }\n        \n    &:active {\n        background-color: rgba(255,255,255,0.2);\n    }\n`;","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getLoading } from './../../redux/auth/authSelectors';\nimport { register } from './../../redux/auth/authOperations';\nimport { toast } from 'react-toastify';\nimport { nanoid } from 'nanoid';\nimport { FormParagraph } from 'components/ContactForm/ContactForm.styled';\nimport { Loader } from './../../components/Loader/Loader';\nimport { RegisterForm, RegisterFormLabel, RegisterFormInput, RegisterFormButton } from './RegisterPage.styled';\n\nexport default function RegisterPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLoading);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    // const form = event.currentTarget.value;\n    const formElement = event.currentTarget;\n    const name = formElement.name.value;\n    const email = formElement.email.value;\n    const password = formElement.password.value;\n    const inputUser = { \n      name, \n      email,\n      password, \n      id: nanoid() \n    };\n    if (!name.trim() || !email.trim() || !password.trim()) {\n      return toast.error('Please fill out all required fields!');\n    } else if (password.length < 8) {\n      return toast.info(\n        'The password should be least at 8 characters long, it must contain uppercase and lowercase letters and numbers!',\n      );\n    }\n    dispatch(register(inputUser));\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <RegisterForm onSubmit={handleSubmit} autoComplete=\"off\">\n        <RegisterFormLabel>\n          <FormParagraph>Enter your name</FormParagraph>\n            <RegisterFormInput\n                label=\"Name\"\n                variant=\"outlined\"\n                type=\"text\"\n                name=\"name\"\n                value={name}\n                onChange={handleChange}\n            />\n        </RegisterFormLabel>\n        <RegisterFormLabel>\n        <FormParagraph>Enter your email</FormParagraph>\n            <RegisterFormInput\n                label=\"Email\"\n                variant=\"outlined\"\n                type=\"email\"\n                name=\"email\"\n                value={email}\n                onChange={handleChange}\n            />\n        </RegisterFormLabel>\n        <RegisterFormLabel>\n        <FormParagraph>Enter your password</FormParagraph>\n            <RegisterFormInput\n                label=\"Password\"\n                variant=\"outlined\"\n                color=\"primary\"\n                type=\"password\"\n                name=\"password\"\n                value={password}\n                onChange={handleChange}\n            />\n        </RegisterFormLabel>\n      {!isLoading && (\n        <RegisterFormButton variant=\"contained\" type=\"submit\">\n          Sign up\n        </RegisterFormButton>\n      )}\n\n      {isLoading && <Loader />}\n    </RegisterForm>\n  );\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["RegisterForm","styled","_templateObject","_taggedTemplateLiteral","RegisterFormLabel","_templateObject2","RegisterFormInput","_templateObject3","RegisterFormButton","_templateObject4","RegisterPage","dispatch","useDispatch","isLoading","useSelector","getLoading","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","handleChange","event","_event$target","target","value","_jsxs","onSubmit","preventDefault","formElement","currentTarget","inputUser","id","nanoid","trim","length","toast","register","autoComplete","children","_jsx","FormParagraph","label","variant","type","onChange","color","Loader","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}